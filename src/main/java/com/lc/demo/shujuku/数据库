




            1.数据库三大范式
                每个列都不可以在拆分
                非主键列，必须完全依赖于主键，而不能依赖于主键的一部分
                非主键列，只能依赖于主键，而不能依赖于非主键

            2.MySQL有关的权限表

                user权限表
                db权限表
                table_priv权限表
                columns_priv权限表
                host权限表



           3.binlog有几种录入格式
           statement、row、mixed模式

           4.MySQL有哪些数据类型

                整数类型  tinyInt  smallInt mediumInt int bigInt

                小数类型  float double decimal

                字符串类型  varchar char   text blob

                时间/日期类型  timestamp datetime

                枚举类型


           5.索引的基本原理
               无序的数据，变成有序的查询



           6.MySQL的存储引擎



            7.MySQL的事务
                    事务的特性：ACID
                                原子性：事务是最小的执行单元，不可以分割。保证动作要么完全成功，要么全部失败。
                                一致性：事务执行前后，数据保持一致
                                隔离性：并发访问数据库时，一个事务不受其他事务影响
                                永久性：一个事务提交以后，他对数据库中的数据的改变时持久的。

                    并发事务带来的问题：

                                脏读
                                不可重复读
                                幻读
                                丢失修改：


                    MySQL中 对并发事务的控制？
                            锁（悲观控制模式）
                                   MySQL中主要通过 读写锁的方式来实现控制并发
                                       共享锁（读锁），事务在读取数据的时候获取共享锁
                                       排他锁（写锁/独占锁），事务在修改记录的时候获取排他锁，不允许多个事务同时获取


                                      锁的粒度不同分为： 表级锁、行级锁（InnoDB默认行级锁）

                            MVCC（多版本并发控制，乐观控制模式）：

                                   MAVCC 多版本控制方法：即对一份数据会存储多个版本，通过事务的可见性，保证事务能看到自己应该看到的版本。

                                            使用全局的版本分配器为每一行数据分配唯一的版本号


                    SQL标准定义了哪些事务的隔离级别：
                            读取未提交：允许读取尚未提交的数据
                            读取已提交：允许读取已经提交的数据
                            可重复读：对于同一字段的多次读取结果是一致的，除非数据本身事务自己所修改
                            可串行化：所有事务依次逐个执行，这样事务之间不可能产生干扰。


                    MySQL中默认的事务隔离级别：可重复读



























